% bias_samplingrate.m
%
% Description: Characterize the bias of mDLAG GP parameter estimates as a 
%              function of sampling rate. Compare time vs frequency domain 
%              fitting approaches. Include also frequency domain with
%              tapering, for bias correction.
%
% Author: 
%     Evren Gokcen    egokcen@cmu.edu

%% Set up script parameters

set_consts_mdlag_bias_samplingrate;

%% Characterize model performance

% Time domain
D_time = nan(numPartitions, numRuns);    % Time delays
tau_time = nan(numPartitions, numRuns);  % Timescales

% Frequency domain
D_freq = nan(numPartitions, numRuns);    % Time delays
tau_freq = nan(numPartitions, numRuns);  % Timescales

% Frequency domain with tapering
D_taper = nan(numPartitions, numRuns);    % Time delays
tau_taper = nan(numPartitions, numRuns);  % Timescales

for runIdx = 1:numRuns
    
    fprintf('Run %d of %d...\n', runIdx, numRuns);
    
    for i = 1:numPartitions
        binWidth = binWidthList(i);              
        fprintf('    period = %d ms...\n', binWidth);
        
        % Load fitted models
        results_time = load( ...
            sprintf('%s/run%03d/period%03d_time.mat', resultDir, runIdx, binWidth) ...
        );
        results_freq = load( ...
            sprintf('%s/run%03d/period%03d_freq.mat', resultDir, runIdx, binWidth) ...
        );
        results_taper = load( ...
            sprintf('%s/run%03d/period%03d_freq_hamming.mat', resultDir, runIdx, binWidth) ...
        );
        % Estimated parameters
        % Time domain
        gp_params_est_time = getGPparams_mdlag(results_time.estParams, binWidth);
        D_time(i,runIdx) = gp_params_est_time.D(end,1);
        tau_time(i,runIdx) = gp_params_est_time.tau(1);

        % Frequency domain
        gp_params_est_freq = getGPparams_mdlag(results_freq.estParams, binWidth);
        D_freq(i,runIdx) = gp_params_est_freq.D(end,1);
        tau_freq(i,runIdx) = gp_params_est_freq.tau(1);

        % Frequency domain with tapering
        gp_params_est_taper = getGPparams_mdlag(results_taper.estParams, binWidth);
        D_taper(i,runIdx) = gp_params_est_taper.D(end,1);
        tau_taper(i,runIdx) = gp_params_est_taper.tau(1);
        
    end

end

%% Visualize results

% Mean and SEM over runs
% Time domain
mean_D_time = mean(D_time,2);
sem_D_time = std(D_time,0,2) / sqrt(numRuns);
mean_tau_time = mean(tau_time,2);
sem_tau_time = std(tau_time,0,2) / sqrt(numRuns);

% Frequency domain
mean_D_freq = mean(D_freq,2);
sem_D_freq = std(D_freq,0,2) / sqrt(numRuns);
mean_tau_freq = mean(tau_freq,2);
sem_tau_freq = std(tau_freq,0,2) / sqrt(numRuns);

% Frequency domain with tapering
mean_D_taper = mean(D_taper,2);
sem_D_taper = std(D_taper,0,2) / sqrt(numRuns);
mean_tau_taper = mean(tau_taper,2);
sem_tau_taper = std(tau_taper,0,2) / sqrt(numRuns);

figure;
% Timescales
h = [];
lbls = {};
subplot(1,2,1);
hold on;
% Ground truth
line(1000./[binWidthList(1) binWidthList(end)], ...
     [gp_params.tau(1) gp_params.tau(1)], ...
     'Color', 'k', ...
     'LineStyle', '--', ...
     'LineWidth', 1.5);
% Time domain
p = fill(1000./[binWidthList, fliplr(binWidthList)], ...
         [mean_tau_time + sem_tau_time; ...
          flipud(mean_tau_time - sem_tau_time)]', ...
         '', ...  % Add custom color below
         'edgecolor', 'none', ...
         'facealpha', 0.2);
p.FaceColor = TIMECOLOR;
h = [h, plot(1000./binWidthList, mean_tau_time, 'color', TIMECOLOR, ...
             'linestyle', '-', ...
             'linewidth', 1.5, ...
             'marker', '.', ...
             'markersize', 10)];
lbls = {lbls{:}, 'Time domain'};
% Frequency domain
p = fill(1000./[binWidthList, fliplr(binWidthList)], ...
         [mean_tau_freq + sem_tau_freq; ...
          flipud(mean_tau_freq - sem_tau_freq)]', ...
         '', ...  % Add custom color below
         'edgecolor', 'none', ...
         'facealpha', 0.2);
p.FaceColor = FREQCOLOR;
h = [h, plot(1000./binWidthList, mean_tau_freq, ...
             'color', FREQCOLOR, ...
             'linestyle', '-', ...
             'linewidth', 1.5, ...
             'marker', '.', ...
             'markersize', 10)];
lbls = {lbls{:}, 'Freq. domain'};
% Frequency domain with tapering
p = fill(1000./[binWidthList, fliplr(binWidthList)], ...
         [mean_tau_taper + sem_tau_taper; ...
          flipud(mean_tau_taper - sem_tau_taper)]', ...
         '', ...  % Add custom color below
         'edgecolor', 'none', ...
         'facealpha', 0.2);
p.FaceColor = TAPERCOLOR;
h = [h, plot(1000./binWidthList, mean_tau_taper, ...
             'color', TAPERCOLOR, ...
             'linestyle', '-', ...
             'linewidth', 1.5, ...
             'marker', '.', ...
             'markersize', 10)];
lbls = {lbls{:}, 'Freq. domain, taper'};
xlabel('Sampling rate (Hz)');
ylabel('Timescale (ms)');
ylim([0, gp_params.tau(1)*1.2])
axis square;
legend(h, lbls, 'location', 'southoutside');
hold off;

% Time delays
h = [];
lbls = {};
subplot(1,2,2);
hold on;
% Ground truth
line(1000./[binWidthList(1) binWidthList(end)], ...
     [gp_params.D(end,1) gp_params.D(end,1)], ...
     'Color', 'k', ...
     'LineStyle', '--', ...
     'LineWidth', 1.5);
% Time domain
p = fill(1000./[binWidthList, fliplr(binWidthList)], ...
         [mean_D_time + sem_D_time; ...
          flipud(mean_D_time - sem_D_time)]', ...
         '', ...  % Add custom color below
         'edgecolor', 'none', ...
         'facealpha', 0.2);
p.FaceColor = TIMECOLOR;
h = [h, plot(1000./binWidthList, mean_D_time, ...
             'color', TIMECOLOR, ...
             'linestyle', '-', ...
             'linewidth', 1.5, ...
             'marker', '.', ...
             'MarkerSize', 10)];
lbls = {lbls{:}, 'Time domain'};
% Frequency domain
p = fill(1000./[binWidthList, fliplr(binWidthList)], ...
         [mean_D_freq + sem_D_freq; ...
          flipud(mean_D_freq - sem_D_freq)]', ...
         '', ...  % Add custom color below
         'edgecolor', 'none', ...
         'facealpha', 0.2);
p.FaceColor = FREQCOLOR;
h = [h, plot(1000./binWidthList, mean_D_freq, ...
             'color', FREQCOLOR, ...
             'linestyle', '-', ...
             'linewidth', 1.5, ...
             'marker', '.', ...
             'markersize', 10)];
lbls = {lbls{:}, 'Freq. domain'};
% Frequency domain with tapering
p = fill(1000./[binWidthList, fliplr(binWidthList)], ...
         [mean_D_taper + sem_D_taper; ...
          flipud(mean_D_taper - sem_D_taper)]', ...
         '', ...  % Add custom color below
         'edgecolor', 'none', ...
         'facealpha', 0.2);
p.FaceColor = TAPERCOLOR;
h = [h, plot(1000./binWidthList, mean_D_taper, ...
             'color', TAPERCOLOR, ...
             'linestyle', '-', ...
             'linewidth', 1.5, ...
             'marker', '.', ...
             'markersize', 10)];
lbls = {lbls{:}, 'Freq. domain with taper'};
xlabel('Sampling rate (Hz)');
ylabel('Time delay (ms)');
ylim([0, gp_params.D(end,1)*1.2])
axis square;
legend(h, lbls, 'location', 'southoutside');
hold off;