% runtime_seqlength.m
%
% Description: Characterize the runtime of mDLAG as a function of 
%              sequence (trial) length. Compare time, inducing, and
%              frequency domain fitting approaches.
%
% Author: 
%     Evren Gokcen    egokcen@cmu.edu

%% Characterize model performance

PLOT_LONG = 1;  % 0: skip mDLAG-freq long-trial results; 1: plot them

% Time domain
numIters_time = nan(numPartitions, numRuns);     % Number of EM iterations
totalRuntime_time = nan(numPartitions, numRuns); % Total runtime to convergence
timePerIter_time = nan(numPartitions, numRuns);  % Avg. time per EM iteration

% Inducing points
numIters_sparse = nan(numPartitions, numRuns);     % Number of EM iterations
totalRuntime_sparse = nan(numPartitions, numRuns); % Total runtime to convergence
timePerIter_sparse = nan(numPartitions, numRuns);  % Avg. time per EM iteration

% Frequency domain
if ~PLOT_LONG
    numIters_freq = nan(numPartitions, numRuns);     % Number of EM iterations
    totalRuntime_freq = nan(numPartitions, numRuns); % Total runtime to convergence
    timePerIter_freq = nan(numPartitions, numRuns);  % Avg. time per EM iteration
else
    numIters_freq = nan(numPartitions+extraPartitions, numRuns);
    totalRuntime_freq = nan(numPartitions+extraPartitions, numRuns);
    timePerIter_freq = nan(numPartitions+extraPartitions, numRuns);
end

for runIdx = 1:numRuns
    
    for i = 1:numPartitions
        T = Tlist(i);
        
        % Load fitted models
        results_time = load( ...
            sprintf('%s/run%03d/T%04d_time.mat', resultDir, runIdx, T) ...
        );
        results_sparse = load( ...
            sprintf('%s/run%03d/T%04d_sparse.mat', resultDir, runIdx, T) ...
        );
        results_freq = load( ...
            sprintf('%s/run%03d/T%04d_freq.mat', resultDir, runIdx, T) ...
        );
        
        % Runtimes
        numIters_time(i,runIdx) = length(results_time.trackedParams.iterTime);
        totalRuntime_time(i,runIdx) = sum(results_time.trackedParams.iterTime);
        timePerIter_time(i,runIdx) = mean(results_time.trackedParams.iterTime);

        numIters_sparse(i,runIdx) = length(results_sparse.trackedParams.iterTime);
        totalRuntime_sparse(i,runIdx) = sum(results_sparse.trackedParams.iterTime);
        timePerIter_sparse(i,runIdx) = mean(results_sparse.trackedParams.iterTime);

        numIters_freq(i,runIdx) = length(results_freq.trackedParams.iterTime);
        totalRuntime_freq(i,runIdx) = sum(results_freq.trackedParams.iterTime);
        timePerIter_freq(i,runIdx) = mean(results_freq.trackedParams.iterTime);
        
    end

    if PLOT_LONG
        for i = 1:extraPartitions
            T = Tlong_list(i);
            
            % Load mDLAG-frequency models fit to very long trials
            results_freq = load( ...
                sprintf('%s/run%03d/T%04d_freq.mat', resultDir, runIdx, T) ...
            );
            
            % Runtimes
            numIters_freq(numPartitions+i,runIdx) = length(results_freq.trackedParams.iterTime);
            totalRuntime_freq(numPartitions+i,runIdx) = sum(results_freq.trackedParams.iterTime);
            timePerIter_freq(numPartitions+i,runIdx) = mean(results_freq.trackedParams.iterTime);
            
        end
    end

end

%% Visualize results

% Mean and SEM over runs
% Time domain
mean_numIters_time = mean(numIters_time,2);
sem_numIters_time = std(numIters_time,0,2) / sqrt(numRuns);
mean_totalRuntime_time = mean(totalRuntime_time,2);
sem_totalRuntime_time = std(totalRuntime_time,0,2) / sqrt(numRuns);
mean_timePerIter_time = mean(timePerIter_time,2);
sem_timePerIter_time = std(timePerIter_time,0,2) / sqrt(numRuns);

% Inducing points
mean_numIters_sparse = mean(numIters_sparse,2);
sem_numIters_sparse = std(numIters_sparse,0,2) / sqrt(numRuns);
mean_totalRuntime_sparse = mean(totalRuntime_sparse,2);
sem_totalRuntime_sparse = std(totalRuntime_sparse,0,2) / sqrt(numRuns);
mean_timePerIter_sparse = mean(timePerIter_sparse,2);
sem_timePerIter_sparse = std(timePerIter_sparse,0,2) / sqrt(numRuns);

% Frequency domain
mean_numIters_freq = mean(numIters_freq,2);
sem_numIters_freq = std(numIters_freq,0,2) / sqrt(numRuns);
mean_totalRuntime_freq = mean(totalRuntime_freq,2);
sem_totalRuntime_freq = std(totalRuntime_freq,0,2) / sqrt(numRuns);
mean_timePerIter_freq = mean(timePerIter_freq,2);
sem_timePerIter_freq = std(timePerIter_freq,0,2) / sqrt(numRuns);
% Optionally include T for the long trials
Tlist_freq = Tlist;
if PLOT_LONG
    Tlist_freq = [Tlist_freq Tlong_list];
end

figure;
% Time per EM iteration
subplot(1,3,1);
hold on;
% Reference lines
% Linear scaling
h4 = line([90 Tlist_freq(end)], 10^(-3.65).*[90 Tlist_freq(end)], ...
     'color', [0.5 0.5 0.5], 'linestyle', '--', 'linewidth', 1.5);
% Cubic scaling
h5 = line([100 500], 10^(-7.4).*[100 500].^3, ...
     'color', [0.5 0.5 0.5], 'linestyle', ':', 'linewidth', 1.5);
% Time domain
p = fill([Tlist, fliplr(Tlist)], ...
         [mean_timePerIter_time + sem_timePerIter_time; ...
          flipud(mean_timePerIter_time - sem_timePerIter_time)]', ...
         '', ...  % Add custom color below
         'edgecolor', 'none', ...
         'facealpha', 0.2);
p.FaceColor = TIMECOLOR;
h1 = plot(Tlist, mean_timePerIter_time, ...
          'color', TIMECOLOR, ...
          'linestyle', '-', ...
          'linewidth', 1.5, ...
          'marker', '.', ...
          'markersize', 10);
% Inducing points
p = fill([Tlist, fliplr(Tlist)], ...
         [mean_timePerIter_sparse + sem_timePerIter_sparse; ...
          flipud(mean_timePerIter_sparse - sem_timePerIter_sparse)]', ...
         '', ...  % Add custom color below
         'edgecolor', 'none', ...
         'facealpha', 0.2);
p.FaceColor = SPARSECOLOR;
h2 = plot(Tlist, mean_timePerIter_sparse, ...
          'color', SPARSECOLOR, ...
          'linestyle', '-', ...
          'linewidth', 1.5, ...
          'marker', '.', ...
          'markersize', 10);
% Frequency domain
p = fill([Tlist_freq(1:numPartitions), fliplr(Tlist_freq(1:numPartitions))], ...
         [mean_timePerIter_freq(1:numPartitions) + sem_timePerIter_freq(1:numPartitions); ...
          flipud(mean_timePerIter_freq(1:numPartitions) - sem_timePerIter_freq(1:numPartitions))]', ...
         '', ...  % Add custom color below
         'edgecolor', 'none', ...
         'facealpha', 0.2);
p.FaceColor = FREQCOLOR;
h3 = plot(Tlist_freq(1:numPartitions), mean_timePerIter_freq(1:numPartitions), ...
          'color', FREQCOLOR, ...
          'linestyle', '-', ...
          'linewidth', 1.5, ...
          'marker', '.', ...
          'markersize', 10);
if PLOT_LONG
    p = fill([Tlist_freq(numPartitions+1:end), fliplr(Tlist_freq(numPartitions+1:end))], ...
             [mean_timePerIter_freq(numPartitions+1:end) + sem_timePerIter_freq(numPartitions+1:end); ...
              flipud(mean_timePerIter_freq(numPartitions+1:end) - sem_timePerIter_freq(numPartitions+1:end))]', ...
             '', ...  % Add custom color below
             'edgecolor', 'none', ...
             'facealpha', 0.2);
    p.FaceColor = FREQCOLOR;
    plot(Tlist_freq(numPartitions+1:end), mean_timePerIter_freq(numPartitions+1:end), ...
         'color', FREQCOLOR, ...
         'linestyle', ':', ...
         'linewidth', 1.5, ...
         'marker', '.', ...
         'markersize', 10);
end
xlabel('Time points per trial');
ylabel('Clock time per iteration (s)');
xscale('log');
yscale('log');
ylim([4*10^(-3) 10^1]);
axis square;
legend([h1 h2 h3 h4 h5], ...
       {'Time domain', 'Inducing points', 'Freq. domain', ...
         'Linear reference', 'Cubic reference'}, ...
       'location', 'southoutside');
hold off;

% Total number of EM iterations
subplot(1,3,2);
hold on;
% Reference lines
% Linear scaling
h4 = line([200 500], 10^(0.5).*[200 500], ...
     'color', [0.5 0.5 0.5], 'linestyle', '--', 'linewidth', 1.5);
% Time domain
p = fill([Tlist, fliplr(Tlist)], ...
         [mean_numIters_time + sem_numIters_time; ...
          flipud(mean_numIters_time - sem_numIters_time)]', ...
         '', ...  % Add custom color below
         'edgecolor', 'none', ...
         'facealpha', 0.2);
p.FaceColor = TIMECOLOR;
h1 = plot(Tlist, mean_numIters_time, ...
          'color', TIMECOLOR, ...
          'linestyle', '-', ...
          'linewidth', 1.5, ...
          'marker', '.', ...
          'markersize', 10);
% Inducing points
p = fill([Tlist, fliplr(Tlist)], ...
         [mean_numIters_sparse + sem_numIters_sparse; ...
          flipud(mean_numIters_sparse - sem_numIters_sparse)]', ...
         '', ...  % Add custom color below
         'edgecolor', 'none', ...
         'facealpha', 0.2);
p.FaceColor = SPARSECOLOR;
h2 = plot(Tlist, mean_numIters_sparse, ...
          'color', SPARSECOLOR, ...
          'linestyle', '-', ...
          'linewidth', 1.5, ...
          'marker', '.', ...
          'markersize', 10);
% Frequency domain
p = fill([Tlist_freq(1:numPartitions), fliplr(Tlist_freq(1:numPartitions))], ...
         [mean_numIters_freq(1:numPartitions) + sem_numIters_freq(1:numPartitions); ...
          flipud(mean_numIters_freq(1:numPartitions) - sem_numIters_freq(1:numPartitions))]', ...
         '', ...  % Add custom color below
         'edgecolor', 'none', ...
         'facealpha', 0.2);
p.FaceColor = FREQCOLOR;
h3 = plot(Tlist_freq(1:numPartitions), mean_numIters_freq(1:numPartitions), ...
          'color', FREQCOLOR, ...
          'linestyle', '-', ...
          'linewidth', 1.5, ...
          'marker', '.', ...
          'markersize', 10);
if PLOT_LONG
    p = fill([Tlist_freq(numPartitions+1:end), fliplr(Tlist_freq(numPartitions+1:end))], ...
         [mean_numIters_freq(numPartitions+1:end) + sem_numIters_freq(numPartitions+1:end); ...
          flipud(mean_numIters_freq(numPartitions+1:end) - sem_numIters_freq(numPartitions+1:end))]', ...
         '', ...  % Add custom color below
         'edgecolor', 'none', ...
         'facealpha', 0.2);
    p.FaceColor = FREQCOLOR;
    plot(Tlist_freq(numPartitions+1:end), mean_numIters_freq(numPartitions+1:end), ...
         'color', FREQCOLOR, ...
         'linestyle', ':', ...
         'linewidth', 1.5, ...
         'marker', '.', ...
         'markersize', 10);
end
xlabel('Time points per trial');
ylabel('No. iterations');
xscale('log');
yscale('log');
ylim([10^2 10^4]);
axis square;
legend([h1 h2 h3 h4 h5], ...
       {'Time domain', 'Inducing points', 'Freq. domain', ...
         'Linear reference', 'Cubic reference'}, ...
       'location', 'southoutside');
hold off;

% Total runtime
subplot(1,3,3);
hold on;
% Reference lines
% Linear scaling
h4 = line([50 Tlist_freq(end)], 10^(-0.95).*[50 Tlist_freq(end)], ...
     'color', [0.5 0.5 0.5], 'linestyle', '--', 'linewidth', 1.5);
% Cubic scaling
h5 = line([100 500], 10^(-4.5).*[100 500].^3, ...
     'color', [0.5 0.5 0.5], 'linestyle', ':', 'linewidth', 1.5);
% Time domain
p = fill([Tlist, fliplr(Tlist)], ...
         [mean_totalRuntime_time + sem_totalRuntime_time; ...
          flipud(mean_totalRuntime_time - sem_totalRuntime_time)]', ...
         '', ...  % Add custom color below
         'edgecolor', 'none', ...
         'facealpha', 0.2);
p.FaceColor = TIMECOLOR;
h1 = plot(Tlist, mean_totalRuntime_time, ...
          'color', TIMECOLOR, ...
          'linestyle', '-', ...
          'linewidth', 1.5, ...
          'marker', '.', ...
          'markersize', 10);
% Inducing points
p = fill([Tlist, fliplr(Tlist)], ...
         [mean_totalRuntime_sparse + sem_totalRuntime_sparse; ...
          flipud(mean_totalRuntime_sparse - sem_totalRuntime_sparse)]', ...
         '', ...  % Add custom color below
         'edgecolor', 'none', ...
         'facealpha', 0.2);
p.FaceColor = SPARSECOLOR;
h2 = plot(Tlist, mean_totalRuntime_sparse, ...
          'color', SPARSECOLOR, ...
          'linestyle', '-', ...
          'linewidth', 1.5, ...
          'marker', '.', ...
          'markersize', 10);
% Frequency domain
p = fill([Tlist_freq(1:numPartitions), fliplr(Tlist_freq(1:numPartitions))], ...
         [mean_totalRuntime_freq(1:numPartitions) + sem_totalRuntime_freq(1:numPartitions); ...
          flipud(mean_totalRuntime_freq(1:numPartitions) - sem_totalRuntime_freq(1:numPartitions))]', ...
         '', ...  % Add custom color below
         'edgecolor', 'none', ...
         'facealpha', 0.2);
p.FaceColor = FREQCOLOR;
h3 = plot(Tlist_freq(1:numPartitions), mean_totalRuntime_freq(1:numPartitions), ...
          'color', FREQCOLOR, ...
          'linestyle', '-', ...
          'linewidth', 1.5, ...
          'marker', '.', ...
          'markersize', 10);
if PLOT_LONG
    p = fill([Tlist_freq(numPartitions+1:end), fliplr(Tlist_freq(numPartitions+1:end))], ...
             [mean_totalRuntime_freq(numPartitions+1:end) + sem_totalRuntime_freq(numPartitions+1:end); ...
              flipud(mean_totalRuntime_freq(numPartitions+1:end) - sem_totalRuntime_freq(numPartitions+1:end))]', ...
             '', ...  % Add custom color below
             'edgecolor', 'none', ...
             'facealpha', 0.2);
    p.FaceColor = FREQCOLOR;
    plot(Tlist_freq(numPartitions+1:end), mean_totalRuntime_freq(numPartitions+1:end), ...
         'color', FREQCOLOR, ...
         'linestyle', ':', ...
         'linewidth', 1.5, ...
         'marker', '.', ...
         'markersize', 10);
end
xlabel('Time points per trial');
ylabel('Total clock time (s)');
xscale('log');
yscale('log');
ylim([10^0 10^5]);
axis square;
legend([h1 h2 h3 h4 h5], ...
       {'Time domain', 'Inducing points', 'Freq. domain', ...
         'Linear reference', 'Cubic reference'}, ...
       'location', 'southoutside');
hold off;
