% prediction_seqlength.m
%
% Description: Characterize the leave-one-out predictive performance of
%              mDLAG as a function of sequence (trial) length. Compare
%              time, inducing, and frequency domain fitting approaches.
%
% Author: 
%     Evren Gokcen    egokcen@cmu.edu

%% Set up script parameters

set_consts_mdlag_scaling_seqlength;

%% Characterize model performance

% Limit performance evaluation to a middle portion of the trial, to
% mitigate bias due to frequency domain-related periodic edge effects.
eval_cutoff = 10;

% Time domain
R2_time = nan(numPartitions, numRuns);
MSE_time = nan(numPartitions, numRuns); 

% Inducing points
R2_sparse = nan(numPartitions, numRuns);
MSE_sparse = nan(numPartitions, numRuns); 

% Frequency domain
R2_freq = nan(numPartitions, numRuns);
MSE_freq = nan(numPartitions, numRuns);

for runIdx = 1:numRuns
    
    fprintf('Run %d of %d...\n', runIdx, numRuns);

    % Load data
    currDataFile = sprintf('%s/run%03d/%s', dataDir, runIdx, dataFile);
    load(currDataFile);
    
    for i = 1:numPartitions
        T = Tlist(i);              
        fprintf('    T = %d...\n', T);
        
        % Load fitted models
        results_time = load( ...
            sprintf('%s/run%03d/T%04d_time.mat', resultDir, runIdx, T) ...
        );
        results_sparse = load( ...
            sprintf('%s/run%03d/T%04d_sparse.mat', resultDir, runIdx, T) ...
        );
        results_freq = load( ...
            sprintf('%s/run%03d/T%04d_freq.mat', resultDir, runIdx, T) ...
        );
        
        % Predictive performances on held-out test trials
        [R2_time(i,runIdx), MSE_time(i,runIdx)] ...
            = pred_leaveoneout_mdlag_freq(seqTrue(test), ...
                                          results_time.estParams, ...
                                          'eval_cutoff', eval_cutoff);

        [R2_sparse(i,runIdx), MSE_sparse(i,runIdx)] ...
            = pred_leaveoneout_mdlag_freq(seqTrue(test), ...
                                          results_sparse.estParams, ...
                                          'eval_cutoff', eval_cutoff);

        [R2_freq(i,runIdx), MSE_freq(i,runIdx)] ...
            = pred_leaveoneout_mdlag_freq(seqTrue(test), ...
                                          results_freq.estParams, ...
                                          'eval_cutoff', eval_cutoff);
        
    end

end

%% Save results

save('results/prediction.mat', ...
    'R2_time', 'MSE_time', 'R2_sparse', 'MSE_sparse', 'R2_freq', 'MSE_freq');

%% Load results, if they already exist

load('results/prediction.mat');

%% Visualize results

% Mean and SEM over runs
% Time domain
mean_R2_time = mean(R2_time,2);
sem_R2_time = std(R2_time,0,2) / sqrt(numRuns);
mean_RMSE_time = mean(sqrt(MSE_time),2);
sem_RMSE_time = std(sqrt(MSE_time),0,2) / sqrt(numRuns);

% Inducing points
mean_R2_sparse = mean(R2_sparse,2);
sem_R2_sparse = std(R2_sparse,0,2) / sqrt(numRuns);
mean_RMSE_sparse = mean(sqrt(MSE_sparse),2);
sem_RMSE_sparse = std(sqrt(MSE_sparse),0,2) / sqrt(numRuns);

% Frequency domain
mean_R2_freq = mean(R2_freq,2);
sem_R2_freq = std(R2_freq,0,2) / sqrt(numRuns);
mean_RMSE_freq = mean(sqrt(MSE_freq),2);
sem_RMSE_freq = std(sqrt(MSE_freq),0,2) / sqrt(numRuns);

% Relative difference between the time and frequency domain approaches
R2_diff = (R2_freq - R2_time) ./ R2_time;
mean_R2_diff = mean(R2_diff, 2);
sem_R2_diff = std(R2_diff,0,2) / sqrt(numRuns);

RMSE_diff = (sqrt(MSE_time) - sqrt(MSE_freq)) ./ sqrt(MSE_time);
mean_RMSE_diff = mean(RMSE_diff, 2);
sem_RMSE_diff = std(RMSE_diff,0,2) / sqrt(numRuns);

% Raw performance of each approach
figure;
% R^2
subplot(1,2,1);
hold on;
% Noise ceiling
nsceil = snr(1)/(snr(1)+1);
line([Tlist(1) Tlist(end)], [nsceil nsceil], ...
     'Color', 'k', ...
     'LineStyle', '--', ...
     'LineWidth', 1.5);
% Time domain
p = fill([Tlist, fliplr(Tlist)], ...
         [mean_R2_time + sem_R2_time; ...
          flipud(mean_R2_time - sem_R2_time)]', ...
         '', ...  % Add custom color below
         'edgecolor', 'none', ...
         'facealpha', 0.2);
p.FaceColor = TIMECOLOR;
h1 = plot(Tlist, mean_R2_time, ...
          'color', TIMECOLOR, ...
          'linestyle', '-', ...
          'linewidth', 1.5, ...
          'marker', '.', ...
          'markersize', 10);
% Inducing points
p = fill([Tlist, fliplr(Tlist)], ...
         [mean_R2_sparse + sem_R2_sparse; ...
          flipud(mean_R2_sparse - sem_R2_sparse)]', ...
         '', ...  % Add custom color below
         'edgecolor', 'none', ...
         'facealpha', 0.2);
p.FaceColor = SPARSECOLOR;
h2 = plot(Tlist, mean_R2_sparse, ...
          'color', SPARSECOLOR, ...
          'linestyle', '-', ...
          'linewidth', 1.5, ...
          'marker', '.', ...
          'markersize', 10);
% Frequency domain
p = fill([Tlist, fliplr(Tlist)], ...
         [mean_R2_freq + sem_R2_freq; ...
          flipud(mean_R2_freq - sem_R2_freq)]', ...
         '', ...  % Add custom color below
         'edgecolor', 'none', ...
         'facealpha', 0.2);
p.FaceColor = FREQCOLOR;
h3 = plot(Tlist, mean_R2_freq, ...
          'color', FREQCOLOR, ...
          'linestyle', '-', ...
          'linewidth', 1.5, ...
          'marker', '.', ...
          'markersize', 10);
xlabel('Time points per trial');
ylabel('Leave-one-out R^2');
xscale('log');
ylim([0 0.2]);
axis square;
legend([h1 h2 h3], {'Time domain', 'Inducing points', 'Freq. domain'}, ...
       'location', 'southoutside');
hold off;

% RMSE
subplot(1,2,2);
hold on;
% Time domain
p = fill([Tlist, fliplr(Tlist)], ...
         [mean_RMSE_time + sem_RMSE_time; ...
          flipud(mean_RMSE_time - sem_RMSE_time)]', ...
         '', ...  % Add custom color below
         'edgecolor', 'none', ...
         'facealpha', 0.2);
p.FaceColor = TIMECOLOR;
h1 = plot(Tlist, mean_RMSE_time, ...
          'color', TIMECOLOR, ...
          'linestyle', '-', ...
          'linewidth', 1.5, ...
          'marker', '.', ...
          'markersize', 10);
% Inducing points
p = fill([Tlist, fliplr(Tlist)], ...
         [mean_RMSE_sparse + sem_RMSE_sparse; ...
          flipud(mean_RMSE_sparse - sem_RMSE_sparse)]', ...
         '', ...  % Add custom color below
         'edgecolor', 'none', ...
         'facealpha', 0.2);
p.FaceColor = SPARSECOLOR;
h2 = plot(Tlist, mean_RMSE_sparse, ...
          'color', SPARSECOLOR, ...
          'linestyle', '-', ...
          'linewidth', 1.5, ...
          'marker', '.', ...
          'markersize', 10);
% Frequency domain
p = fill([Tlist, fliplr(Tlist)], ...
         [mean_RMSE_freq + sem_RMSE_freq; ...
          flipud(mean_RMSE_freq - sem_RMSE_freq)]', ...
         '', ...  % Add custom color below
         'edgecolor', 'none', ...
         'facealpha', 0.2);
p.FaceColor = FREQCOLOR;
h3 = plot(Tlist, mean_RMSE_freq, ...
          'color', FREQCOLOR, ...
          'linestyle', '-', ...
          'linewidth', 1.5, ...
          'marker', '.', ...
          'markersize', 10);
xlabel('Time points per trial');
ylabel('Leave-one-out RMSE');
xscale('log');
axis square;
legend([h1 h2 h3], {'Time domain', 'Inducing points', 'Freq. domain'}, ...
       'location', 'southoutside');
hold off;

% Relative difference in performance, time and frequency domain approaches
figure;
% R^2
subplot(1,2,1);
hold on;
line([Tlist(1) Tlist(end)], [0 0], ...
     'Color', 'k', ...
     'LineStyle', '--', ...
     'LineWidth', 1.5);
fill([Tlist, fliplr(Tlist)], ...
     [mean_R2_diff + sem_R2_diff; ...
      flipud(mean_R2_diff - sem_R2_diff)]', ...
     'r', ...
     'edgecolor', 'none', ...
     'facealpha', 0.2);
plot(Tlist, mean_R2_diff, ...
     'r-', ...
     'linewidth', 1.5, ...
     'marker', '.', ...
     'markersize', 10);
xlabel('Time points per trial');
ylabel('Relative \Delta R^2');
ylim([-0.015, 0.002]);
xscale('log');
axis square;
hold off;

% RMSE
subplot(1,2,2);
hold on;
line([Tlist(1) Tlist(end)], [0 0], ...
     'Color', 'k', ...
     'LineStyle', '--', ...
     'LineWidth', 1.5);
fill([Tlist, fliplr(Tlist)], ...
     [mean_RMSE_diff + sem_RMSE_diff; ...
      flipud(mean_RMSE_diff - sem_RMSE_diff)]', ...
     'r', ...
     'edgecolor', 'none', ...
     'facealpha', 0.2);
h1 = plot(Tlist, mean_RMSE_diff, ...
          'r-', ...
          'linewidth', 1.5, ...
          'marker', '.', ...
          'markersize', 10);
xlabel('Time points per trial');
ylabel('Relative \Delta RMSE');
xscale('log');
ylim([-0.0015, 0.0005]);
axis square;
hold off;
