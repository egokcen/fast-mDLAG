% bias_numgroups.m
%
% Description: Characterize the bias of mDLAG GP parameter estimates as a 
%              function of group number. Compare time, inducing, and 
%              frequency domain fitting approaches.
%
% Author: 
%     Evren Gokcen    egokcen@cmu.edu

%% Set up script parameters

set_consts_mdlag_scaling_numgroups;

%% Characterize model performance

PLOT_INDUCING = false;  % Toggle mDLAG-inducing results

% Time domain
D_err_time = nan(numPartitions, numRuns);    % Time delays
tau_err_time = nan(numPartitions, numRuns);  % Timescale error

if PLOT_INDUCING
    % Inducing points
    D_err_sparse = nan(numPartitions, numRuns);    % Time delays
    tau_err_sparse = nan(numPartitions, numRuns);  % Timescales
end

% Frequency domain
D_err_freq = nan(numPartitions, numRuns);    % Time delay error
tau_err_freq = nan(numPartitions, numRuns);  % Timescale error

% Frequency domain with taper
D_err_taper = nan(numPartitions, numRuns);    % Time delays
tau_err_taper = nan(numPartitions, numRuns);  % Timescales

for runIdx = 1:numRuns
    
    for i = 1:numPartitions

        numGroups = numGroupsList(i);
        fprintf('Run %d of %d, M = %d...\n', runIdx, numRuns, numGroups);

        % Load data and ground truth parameters
        currDataFile = sprintf('%s/run%03d/%s%02d', dataDir, runIdx, dataFile, numGroups);
        load(currDataFile);
        gp_params_true = getGPparams_mdlag(trueParams, binWidth);
        
        % Load fitted models
        results_time = load( ...
            sprintf('%s/run%03d/numgroups_%02d_time.mat', resultDir, runIdx, numGroups) ...
        );
        if PLOT_INDUCING
            results_sparse = load( ...
                sprintf('%s/run%03d/numgroups_%02d_sparse.mat', resultDir, runIdx, numGroups) ...
            );
        end
        results_freq = load( ...
            sprintf('%s/run%03d/numgroups_%02d_freq.mat', resultDir, runIdx, numGroups) ...
        );
        results_taper = load( ...
            sprintf('%s/run%03d/numgroups_%02d_freq_hamming.mat', resultDir, runIdx, numGroups) ...
        );
        
        % Estimated parameters
        gp_params_est_time = getGPparams_mdlag(results_time.estParams, binWidth);
        D_err_time(i,runIdx) = mean(gp_params_est_time.D(:,1) - gp_params_true.D(:,1));
        tau_err_time(i,runIdx) = gp_params_est_time.tau(1) - gp_params_true.tau(1);

        if PLOT_INDUCING
            gp_params_est_sparse = getGPparams_mdlag(results_sparse.estParams, binWidth);
            D_err_sparse(i,runIdx) = mean(gp_params_est_sparse.D(:,1) - gp_params_true.D(:,1));
            tau_err_sparse(i,runIdx) = gp_params_est_sparse.tau(1) - gp_params_true.tau(1);
        end

        gp_params_est_freq = getGPparams_mdlag(results_freq.estParams, binWidth);
        D_err_freq(i,runIdx) = mean(gp_params_est_freq.D(:,1) - gp_params_true.D(:,1));
        tau_err_freq(i,runIdx) = gp_params_est_freq.tau(1) - gp_params_true.tau(1);

        gp_params_est_taper = getGPparams_mdlag(results_taper.estParams, binWidth);
        D_err_taper(i,runIdx) = mean(gp_params_est_taper.D(:,1) - gp_params_true.D(:,1));
        tau_err_taper(i,runIdx) = gp_params_est_taper.tau(1) - gp_params_true.tau(1);
        
    end

end

%% Visualize results

% Mean and SEM over runs
% Time domain
mean_D_err_time = mean(D_err_time,2);
sem_D_err_time = std(D_err_time,0,2) / sqrt(numRuns);
mean_tau_err_time = mean(tau_err_time,2);
sem_tau_err_time = std(tau_err_time,0,2) / sqrt(numRuns);

if PLOT_INDUCING
    % Inducing points
    mean_D_err_sparse = mean(D_err_sparse,2);
    sem_D_err_sparse = std(D_err_sparse,0,2) / sqrt(numRuns);
    mean_tau_err_sparse = mean(tau_err_sparse,2);
    sem_tau_err_sparse = std(tau_err_sparse,0,2) / sqrt(numRuns);
end

% Frequency domain
mean_D_err_freq = mean(D_err_freq,2);
sem_D_err_freq = std(D_err_freq,0,2) / sqrt(numRuns);
mean_tau_err_freq = mean(tau_err_freq,2);
sem_tau_err_freq = std(tau_err_freq,0,2) / sqrt(numRuns);

% Frequency domain with taper
mean_D_err_taper = mean(D_err_taper,2);
sem_D_err_taper = std(D_err_taper,0,2) / sqrt(numRuns);
mean_tau_err_taper = mean(tau_err_taper,2);
sem_tau_err_taper = std(tau_err_taper,0,2) / sqrt(numRuns);

figure;
% Timescales
h = [];
lbls = {};
subplot(1,2,1);
hold on;
% Ground truth
line([numGroupsList(1) numGroupsList(end)], [0 0], ...
     'Color', 'k', ...
     'LineStyle', '--', ...
     'LineWidth', 1.5);
% Time domain
p = fill([numGroupsList, fliplr(numGroupsList)], ...
         [mean_tau_err_time + sem_tau_err_time; ...
          flipud(mean_tau_err_time - sem_tau_err_time)]', ...
         '', ...  % Add custom color below
         'edgecolor', 'none', ...
         'facealpha', 0.2);
p.FaceColor = TIMECOLOR;
h = [h, plot(numGroupsList, mean_tau_err_time, ...
             'color', TIMECOLOR, ...
             'linestyle', '-', ...
             'linewidth', 1.5, ...
             'marker', '.', ...
             'markersize', 10)];
lbls = {lbls{:}, 'Time domain'};
if PLOT_INDUCING
    % Inducing points
    p = fill([numGroupsList, fliplr(numGroupsList)], ...
             [mean_tau_err_sparse + sem_tau_err_sparse; ...
              flipud(mean_tau_err_sparse - sem_tau_err_sparse)]', ...
             '', ...  % Add custom color below
             'edgecolor', 'none', ...
             'facealpha', 0.2);
    p.FaceColor = SPARSECOLOR;
    h = [h, plot(numGroupsList, mean_tau_err_sparse, ...
                     'color', SPARSECOLOR, ...
                     'linestyle', '-', ...
                     'linewidth', 1.5, ...
                     'marker', '.', ...
                     'MarkerSize', 10)];
    lbls = {lbls{:}, 'Inducing points'};
end
% Frequency domain
p = fill([numGroupsList, fliplr(numGroupsList)], ...
         [mean_tau_err_freq + sem_tau_err_freq; ...
          flipud(mean_tau_err_freq - sem_tau_err_freq)]', ...
         '', ...  % Add custom color below
         'edgecolor', 'none', ...
         'facealpha', 0.2);
p.FaceColor = FREQCOLOR;
h = [h, plot(numGroupsList, mean_tau_err_freq, ...
             'color', FREQCOLOR, ...
             'linestyle', '-', ...
             'linewidth', 1.5, ...
             'marker', '.', ...
             'markersize', 10)];
lbls = {lbls{:}, 'Frequency domain'};
% Frequency domain with taper
p = fill([numGroupsList, fliplr(numGroupsList)], ...
         [mean_tau_err_taper + sem_tau_err_taper; ...
          flipud(mean_tau_err_taper - sem_tau_err_taper)]', ...
         '', ...  % Add custom color below
         'edgecolor', 'none', ...
         'facealpha', 0.2);
p.FaceColor = TAPERCOLOR;
h = [h, plot(numGroupsList, mean_tau_err_taper, ...
             'color', TAPERCOLOR, ...
             'linestyle', '-', ...
             'linewidth', 1.5, ...
             'marker', '.', ...
             'markersize', 10)];
lbls = {lbls{:}, 'Taper'};
xlabel('No. groups');
ylabel('Timescale error (ms)');
ylim([-30 30]);
axis square;
legend(h, lbls, 'location', 'southoutside');
hold off;

% Time delays
h = [];
lbls = {};
subplot(1,2,2);
hold on;
% Ground truth
line([numGroupsList(1) numGroupsList(end)], [0 0], ...
     'Color', 'k', ...
     'LineStyle', '--', ...
     'LineWidth', 1.5);
% Time domain
p = fill([numGroupsList, fliplr(numGroupsList)], ...
         [mean_D_err_time + sem_D_err_time; ...
          flipud(mean_D_err_time - sem_D_err_time)]', ...
         '', ...  % Add custom color below
         'edgecolor', 'none', ...
         'facealpha', 0.2);
p.FaceColor = TIMECOLOR;
h = [h, plot(numGroupsList, mean_D_err_time, ...
             'color', TIMECOLOR, ...
             'linestyle', '-', ...
             'linewidth', 1.5, ...
             'marker', '.', ...
             'MarkerSize', 10)];
lbls = {lbls{:}, 'Time domain'};
if PLOT_INDUCING
    % Inducing points
    p = fill([numGroupsList, fliplr(numGroupsList)], ...
             [mean_D_err_sparse + sem_D_err_sparse; ...
              flipud(mean_D_err_sparse - sem_D_err_sparse)]', ...
             '', ...  % Add custom color below
             'edgecolor', 'none', ...
             'facealpha', 0.2);
    p.FaceColor = SPARSECOLOR;
    h = [h, plot(numGroupsList, mean_D_err_sparse, ...
                 'color', SPARSECOLOR, ...
                 'linestyle', '-', ...
                 'linewidth', 1.5, ...
                 'marker', '.', ...
                 'MarkerSize', 10)];
    lbls = {lbls{:}, 'Inducing points'};
end
% Frequency domain
p = fill([numGroupsList, fliplr(numGroupsList)], ...
         [mean_D_err_freq + sem_D_err_freq; ...
          flipud(mean_D_err_freq - sem_D_err_freq)]', ...
         '', ...  % Add custom color below
         'edgecolor', 'none', ...
         'facealpha', 0.2);
p.FaceColor = FREQCOLOR;
h = [h, plot(numGroupsList, mean_D_err_freq, ...
             'color', FREQCOLOR, ...
             'linestyle', '-', ...
             'linewidth', 1.5, ...
             'marker', '.', ...
             'markersize', 10)];
lbls = {lbls{:}, 'Frequency domain'};
% Frequency domain with taper
p = fill([numGroupsList, fliplr(numGroupsList)], ...
         [mean_D_err_taper + sem_D_err_taper; ...
          flipud(mean_D_err_taper - sem_D_err_taper)]', ...
         '', ...  % Add custom color below
         'edgecolor', 'none', ...
         'facealpha', 0.2);
p.FaceColor = TAPERCOLOR;
h = [h, plot(numGroupsList, mean_D_err_taper, ...
             'color', TAPERCOLOR, ...
             'linestyle', '-', ...
             'linewidth', 1.5, ...
             'marker', '.', ...
             'markersize', 10)];
lbls = {lbls{:}, 'Taper'};
xlabel('No. groups');
ylabel('Time delay error (ms)');
ylim([-5 5])
axis square;
legend(h, lbls, 'location', 'southoutside');
hold off;