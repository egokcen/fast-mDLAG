% runtime_numgroups.m
%
% Description: Characterize the runtime of mDLAG as a function of group 
%              number. Compare time, inducing, and frequency domain fitting
%              approaches.
% Author: 
%     Evren Gokcen    egokcen@cmu.edu

%% Characterize model performance

% Time domain
numIters_time = nan(numPartitions, numRuns);     % Number of EM iterations
totalRuntime_time = nan(numPartitions, numRuns); % Total runtime to convergence
timePerIter_time = nan(numPartitions, numRuns);  % Avg. time per EM iteration

% Inducing points
numIters_sparse = nan(numPartitions, numRuns);     % Number of EM iterations
totalRuntime_sparse = nan(numPartitions, numRuns); % Total runtime to convergence
timePerIter_sparse = nan(numPartitions, numRuns);  % Avg. time per EM iteration

% Frequency domain
numIters_freq = nan(numPartitions, numRuns);     % Number of EM iterations
totalRuntime_freq = nan(numPartitions, numRuns); % Total runtime to convergence
timePerIter_freq = nan(numPartitions, numRuns);  % Avg. time per EM iteration

for runIdx = 1:numRuns
    
    for i = 1:numPartitions
        numGroups = numGroupsList(i);
        
        % Load fitted models
        results_time = load( ...
            sprintf('%s/run%03d/numgroups_%02d_time.mat', resultDir, runIdx, numGroups) ...
        );
        results_sparse = load( ...
            sprintf('%s/run%03d/numgroups_%02d_sparse.mat', resultDir, runIdx, numGroups) ...
        );
        results_freq = load( ...
            sprintf('%s/run%03d/numgroups_%02d_freq.mat', resultDir, runIdx, numGroups) ...
        );
        
        % Runtimes
        numIters_time(i,runIdx) = length(results_time.trackedParams.iterTime);
        totalRuntime_time(i,runIdx) = sum(results_time.trackedParams.iterTime);
        timePerIter_time(i,runIdx) = mean(results_time.trackedParams.iterTime);

        numIters_sparse(i,runIdx) = length(results_sparse.trackedParams.iterTime);
        totalRuntime_sparse(i,runIdx) = sum(results_sparse.trackedParams.iterTime);
        timePerIter_sparse(i,runIdx) = mean(results_sparse.trackedParams.iterTime);

        numIters_freq(i,runIdx) = length(results_freq.trackedParams.iterTime);
        totalRuntime_freq(i,runIdx) = sum(results_freq.trackedParams.iterTime);
        timePerIter_freq(i,runIdx) = mean(results_freq.trackedParams.iterTime);

    end

end

%% Visualize results

% Mean and SEM over runs
% Time domain
mean_numIters_time = mean(numIters_time,2);
sem_numIters_time = std(numIters_time,0,2) / sqrt(numRuns);
mean_totalRuntime_time = mean(totalRuntime_time,2);
sem_totalRuntime_time = std(totalRuntime_time,0,2) / sqrt(numRuns);
mean_timePerIter_time = mean(timePerIter_time,2);
sem_timePerIter_time = std(timePerIter_time,0,2) / sqrt(numRuns);

% Inducing points
mean_numIters_sparse = mean(numIters_sparse,2);
sem_numIters_sparse = std(numIters_sparse,0,2) / sqrt(numRuns);
mean_totalRuntime_sparse = mean(totalRuntime_sparse,2);
sem_totalRuntime_sparse = std(totalRuntime_sparse,0,2) / sqrt(numRuns);
mean_timePerIter_sparse = mean(timePerIter_sparse,2);
sem_timePerIter_sparse = std(timePerIter_sparse,0,2) / sqrt(numRuns);

% Frequency domain
mean_numIters_freq = mean(numIters_freq,2);
sem_numIters_freq = std(numIters_freq,0,2) / sqrt(numRuns);
mean_totalRuntime_freq = mean(totalRuntime_freq,2);
sem_totalRuntime_freq = std(totalRuntime_freq,0,2) / sqrt(numRuns);
mean_timePerIter_freq = mean(timePerIter_freq,2);
sem_timePerIter_freq = std(timePerIter_freq,0,2) / sqrt(numRuns);

figure;
% Time per EM iteration
subplot(1,3,1);
hold on;
% Reference lines
% Linear scaling
h4 = line([4 23], 10^(-2).*[4 23], ...
     'color', [0.5 0.5 0.5], 'linestyle', '--', 'linewidth', 1.5);
% Cubic scaling
h5 = line([4 23], 10^(-2.7).*[4 23].^3, ...
     'color', [0.5 0.5 0.5], 'linestyle', ':', 'linewidth', 1.5);
% Time domain
p = fill([numGroupsList, fliplr(numGroupsList)], ...
         [mean_timePerIter_time + sem_timePerIter_time; ...
          flipud(mean_timePerIter_time - sem_timePerIter_time)]', ...
         '', ...  % Add custom color below
         'edgecolor', 'none', ...
         'facealpha', 0.2);
p.FaceColor = TIMECOLOR;
h1 = plot(numGroupsList, mean_timePerIter_time, ...
          'color', TIMECOLOR, ...
          'linestyle', '-', ...
          'linewidth', 1.5, ...
          'marker', '.', ...
          'markersize', 10);
% Inducing points
p = fill([numGroupsList, fliplr(numGroupsList)], ...
         [mean_timePerIter_sparse + sem_timePerIter_sparse; ...
          flipud(mean_timePerIter_sparse - sem_timePerIter_sparse)]', ...
         '', ...  % Add custom color below
         'edgecolor', 'none', ...
         'facealpha', 0.2);
p.FaceColor = SPARSECOLOR;
h2 = plot(numGroupsList, mean_timePerIter_sparse, ...
          'color', SPARSECOLOR, ...
          'linestyle', '-', ...
          'linewidth', 1.5, ...
          'marker', '.', ...
          'markersize', 10);
% Frequency domain
p = fill([numGroupsList, fliplr(numGroupsList)], ...
         [mean_timePerIter_freq + sem_timePerIter_freq; ...
          flipud(mean_timePerIter_freq - sem_timePerIter_freq)]', ...
         '', ...  % Add custom color below
         'edgecolor', 'none', ...
         'facealpha', 0.2);
p.FaceColor = FREQCOLOR;
h3 = plot(numGroupsList, mean_timePerIter_freq, ...
          'color', FREQCOLOR, ...
          'linestyle', '-', ...
          'linewidth', 1.5, ...
          'marker', '.', ...
          'markersize', 10);
xlabel('No. groups');
ylabel('Clock time per iteration (s)');
xlim([1 30]);
xscale('log');
yscale('log');
axis square;
legend([h1 h2 h3 h4 h5], ...
       {'Time domain', 'Inducing points', 'Freq. domain', ...
         'Linear reference', 'Cubic reference'}, ...
       'location', 'southoutside');
hold off;

% Total number of EM iterations
subplot(1,3,2);
hold on;
h4 = line([4 23], 10^(2.5).*[4 23], ...
     'color', [0.5 0.5 0.5], 'linestyle', '--', 'linewidth', 1.5);
% Time domain
p = fill([numGroupsList, fliplr(numGroupsList)], ...
         [mean_numIters_time + sem_numIters_time; ...
          flipud(mean_numIters_time - sem_numIters_time)]', ...
         '', ...  % Add custom color below
         'edgecolor', 'none', ...
         'facealpha', 0.2);
p.FaceColor = TIMECOLOR;
h1 = plot(numGroupsList, mean_numIters_time, ...
          'color', TIMECOLOR, ...
          'linestyle', '-', ...
          'linewidth', 1.5, ...
          'marker', '.', ...
          'markersize', 10);
% Inducing points
p = fill([numGroupsList, fliplr(numGroupsList)], ...
         [mean_numIters_sparse + sem_numIters_sparse; ...
          flipud(mean_numIters_sparse - sem_numIters_sparse)]', ...
         '', ...  % Add custom color below
         'edgecolor', 'none', ...
         'facealpha', 0.2);
p.FaceColor = SPARSECOLOR;
h2 = plot(numGroupsList, mean_numIters_sparse, ...
          'color', SPARSECOLOR, ...
          'linestyle', '-', ...
          'linewidth', 1.5, ...
          'marker', '.', ...
          'markersize', 10);
% Frequency domain
p = fill([numGroupsList, fliplr(numGroupsList)], ...
         [mean_numIters_freq + sem_numIters_freq; ...
          flipud(mean_numIters_freq - sem_numIters_freq)]', ...
         '', ...  % Add custom color below
         'edgecolor', 'none', ...
         'facealpha', 0.2);
p.FaceColor = FREQCOLOR;
h3 = plot(numGroupsList, mean_numIters_freq, ...
          'color', FREQCOLOR, ...
          'linestyle', '-', ...
          'linewidth', 1.5, ...
          'marker', '.', ...
          'markersize', 10);
xlabel('No. groups');
ylabel('No. iterations');
xlim([1 30]);
ylim([10^2 2*10^4]);
axis square;
xscale('log');
yscale('log');
legend([h1 h2 h3 h4 h5], ...
       {'Time domain', 'Inducing points', 'Freq. domain', ...
         'Linear reference', 'Cubic reference'}, ...
       'location', 'southoutside');
hold off;

% Total runtime
subplot(1,3,3);
hold on;
% Reference lines
% Linear scaling
h4 = line([4 23], 10^(0.7).*[4 23], ...
     'color', [0.5 0.5 0.5], 'linestyle', '--', 'linewidth', 1.5);
% Cubic scaling
h5 = line([4 23], 10^(0.2).*[4 23].^3, ...
     'color', [0.5 0.5 0.5], 'linestyle', ':', 'linewidth', 1.5);
% Time domain
p = fill([numGroupsList, fliplr(numGroupsList)], ...
         [mean_totalRuntime_time + sem_totalRuntime_time; ...
          flipud(mean_totalRuntime_time - sem_totalRuntime_time)]', ...
         '', ...  % Add custom color below
         'edgecolor', 'none', ...
         'facealpha', 0.2);
p.FaceColor = TIMECOLOR;
h1 = plot(numGroupsList, mean_totalRuntime_time, ...
          'color', TIMECOLOR, ...
          'linestyle', '-', ...
          'linewidth', 1.5, ...
          'marker', '.', ...
          'markersize', 10);
% Inducing points
p = fill([numGroupsList, fliplr(numGroupsList)], ...
         [mean_totalRuntime_sparse + sem_totalRuntime_sparse; ...
          flipud(mean_totalRuntime_sparse - sem_totalRuntime_sparse)]', ...
         '', ...  % Add custom color below
         'edgecolor', 'none', ...
         'facealpha', 0.2);
p.FaceColor = SPARSECOLOR;
h2 = plot(numGroupsList, mean_totalRuntime_sparse, ...
          'color', SPARSECOLOR, ...
          'linestyle', '-', ...
          'linewidth', 1.5, ...
          'marker', '.', ...
          'markersize', 10);
% Frequency domain
p = fill([numGroupsList, fliplr(numGroupsList)], ...
         [mean_totalRuntime_freq + sem_totalRuntime_freq; ...
          flipud(mean_totalRuntime_freq - sem_totalRuntime_freq)]', ...
         '', ...  % Add custom color below
         'edgecolor', 'none', ...
         'facealpha', 0.2);
p.FaceColor = FREQCOLOR;
h3 = plot(numGroupsList, mean_totalRuntime_freq, ...
          'color', FREQCOLOR, ...
          'linestyle', '-', ...
          'linewidth', 1.5, ...
          'marker', '.', ...
          'markersize', 10);
xlabel('No. groups');
ylabel('Total clock time (s)');
xlim([1 30]);
xscale('log');
yscale('log');
axis square;
legend([h1 h2 h3 h4 h5], ...
       {'Time domain', 'Inducing points', 'Freq. domain', ...
         'Linear reference', 'Cubic reference'}, ...
       'location', 'southoutside');
hold off;